<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevComponents.Instrumentation</name>
    </assembly>
    <members>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.#ctor(DevComponents.Instrumentation.KnobControl)">
            <summary>
            Constructor
            </summary>
            <param name="knobControl">Associated knob control</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.ApplyColor(DevComponents.Instrumentation.Primitives.LinearGradientColorTable,DevComponents.Instrumentation.Primitives.LinearGradientColorTable)">
            <summary>
            ApplyColor
            </summary>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.ConfigureKnob(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Main control configuration routine
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.ResetKnob">
            <summary>
            Sets the reset state to true, signifying
            that the control needs to be reconfigured
            before it is redrawn to the screen
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.InitRender(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Initializes the rendering process by making
            sure that the control is reconfigured if
            necessary
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.RenderTickMinor(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the minor tick marks
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.GetMinorTickPoints(System.Int32)">
            <summary>
            Calculates a series of points
            that defines the tick mark
            </summary>
            <param name="tick">Tick to calculate</param>
            <returns>An array of points that defines the tick</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.RenderTickMajor(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the Major Tick marks
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.GetMajorTickPoints(System.Int32)">
            <summary>
            Calculates a series of points
            that defines the tick mark
            </summary>
            <param name="tick">Tick to calculate</param>
            <returns>An array of points that defines the tick</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.RenderTickLabel(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the major tick label
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.RenderFocusRect(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the base focus rect
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.GetValueFromPoint(System.Drawing.Point)">
            <summary>
            Determines the control Value from
            a specified Point on the control
            </summary>
            <param name="pt">Point on the control</param>
            <returns>Value</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.CalculateTicksCounts">
            <summary>
            Calculate how many major and
            minor ticks are presented on the control
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.MeasureTickLabels">
            <summary>
            Measure the width of each text label in order to
            make sure we have room for it in the control
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.GetTickDegree(System.Single,System.Int32)">
            <summary>
            Gets the arc degree associated with
            the given gauge tick
            </summary>
            <param name="tickAmount">Major or minor tick amount</param>
            <param name="tick">The tick to convert</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.GetRadians(System.Single)">
            <summary>
            Converts Degrees to Radians
            </summary>
            <param name="theta">Degrees</param>
            <returns>Radians</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.GetDegrees(System.Double)">
            <summary>
            Converts Radians to Degrees
            </summary>
            <param name="radians">Radians</param>
            <returns>Degrees</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.PointInControl(System.Drawing.Point)">
            <summary>
            Determines if a given Point is within
            the bounds of the control
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.BaseKnob.PointInCircle(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            Determines if a given point is within a given circle
            </summary>
            <param name="pt">Point in question</param>
            <param name="cpt">Center Point</param>
            <param name="radius">Circle radius</param>
            <returns></returns>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.MajorTickColor">
            <summary>
            MajorTickColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.MinorTickColor">
            <summary>
            MinorTickColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.KnobIndicatorPointerColor">
            <summary>
            KnobIndicatorPointerColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.ZoneIndicatorColor">
            <summary>
            ZoneIndicatorBaseColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.KnobFaceColor">
            <summary>
            KnobFaceColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.KnobIndicatorColor">
            <summary>
            KnobIndicatorColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.LeftZoneIndicatorColor">
            <summary>
            LeftZoneIndicatorColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.MiddleZoneIndicatorColor">
            <summary>
            MiddleZoneIndicatorColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.RightZoneIndicatorColor">
            <summary>
            RightZoneIndicatorColor
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.BaseKnob.ValueCount">
            <summary>
            Gets the value range, expressed as a count
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.ColorFactory.GetColor(System.String)">
            <summary>
            Converts hex string to Color type.
            </summary>
            <param name="rgbHex">Hexadecimal color representation.</param>
            <returns>Reference to Color object.</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.ColorFactory.GetColor(System.Int32)">
            <summary>
            Converts hex string to Color type.
            </summary>
            <param name="rgb">Color representation as 32-bit RGB value.</param>
            <returns>Reference to Color object.</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.ColorFactory.GetColor(System.Int32,System.Int32)">
            <summary>
            Converts hex string to Color type.
            </summary>
            <param name="alpha"></param>
            <param name="rgb">Color representation as 32-bit RGB value.</param>
            <returns>Reference to Color object.</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobColorTable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobColorTable.KnobColorTableChanged(System.Object,System.EventArgs)">
            <summary>
            KnobColorTableChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobColorTable.OnColorTableChange">
            <summary>
            OnColorTableChange
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobColorTable.ColorTableChanged">
            <summary>
            Event raised when ColorTable has changed
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.MajorTickColor">
            <summary>
            Gets or sets the color of the Major Tick marks
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.MinorTickColor">
            <summary>
            Gets or sets the color of the Minor Tick marks
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.KnobIndicatorPointerColor">
            <summary>
            Gets or sets the color of the KnobIndicatorPointer
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.ZoneIndicatorColor">
            <summary>
            Gets or sets the color of the ZoneIndicator
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.KnobFaceColor">
            <summary>
            Gets or sets the color of the KnobFace
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.KnobIndicatorColor">
            <summary>
            Gets or sets the color of the KnobIndicator
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.MinZoneIndicatorColor">
            <summary>
            Gets or sets the color of the MinZoneIndicator
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.MaxZoneIndicatorColor">
            <summary>
            Gets or sets the color of the MaxZoneIndicator
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobColorTable.MidZoneIndicatorColor">
            <summary>
            Gets or sets the color of the MidZoneIndicator
            </summary>
        </member>
        <member name="T:DevComponents.Instrumentation.KnobColorTableConvertor">
            <summary>
            KnobColorTableConvertor
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobColorTableConvertor.MyColorConverter(DevComponents.Instrumentation.Primitives.LinearGradientColorTable,System.Drawing.ColorConverter)">
            <summary>
            MyColorConverter
            </summary>
            <param name="ct">ColorTable</param>
            <param name="cvt">ColorConverter</param>
            <returns>string or null</returns>
        </member>
        <member name="T:DevComponents.Instrumentation.KnobControl">
            <summary>
            Defines Knob instrumentation control.
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ShouldSerializeKnobColor">
            <summary>
            Gets whether property should be serialized
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ResetKnobColor">
            <summary>
            Resets property to it's default value
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.SetKnobStyle(DevComponents.Instrumentation.eKnobStyle)">
            <summary>
            Sets the display style for the control
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ShouldSerializeMajorTickAmount">
            <summary>
            Gets whether property should be serialized
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ResetMajorTickAmount">
            <summary>
            Resets property to it's default value
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ShouldSerializeMaxValue">
            <summary>
            Gets whether property should be serialized
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ResetMaxValue">
            <summary>
            Resets property to it's default value
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ShouldSerializeMinorTickAmount">
            <summary>
            Gets whether property should be serialized
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ResetMinorTickAmount">
            <summary>
            Resets property to it's default value
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ShouldSerializeMinValue">
            <summary>
            Gets whether property should be serialized
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ResetMinValue">
            <summary>
            Resets property to it's default value
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ShouldSerializeValue">
            <summary>
            Gets whether property should be serialized
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.ResetValue">
            <summary>
            Resets property to it's default value
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.HookEvents(System.Boolean)">
            <summary>
            Hooks or unhooks needed events
            </summary>
            <param name="hook">true to hook</param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.KnobControl_Resize(System.Object,System.EventArgs)">
            <summary>
            Control Resize processing
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnGotFocus(System.EventArgs)">
            <summary>
            Handles control GotFocus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnLostFocus(System.EventArgs)">
            <summary>
            Handles control GotFocus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnValueChanged(System.Decimal,System.Decimal)">
            <summary>
            Called when the control 'Value' is changed
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnColorTableChanged">
            <summary>
            Called when the Knob ColorTable has changed
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the contents of the control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.RenderZoneIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            RenderZoneIndicator
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.RenderTickMinor(System.Windows.Forms.PaintEventArgs)">
            <summary>
            RenderTickMinor
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.RenderTickMajor(System.Windows.Forms.PaintEventArgs)">
            <summary>
            RenderTickMajor
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.RenderTickLabel(System.Windows.Forms.PaintEventArgs)">
            <summary>
            RenderTickLabel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.RenderKnobFace(System.Windows.Forms.PaintEventArgs)">
            <summary>
            RenderKnobFace
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.RenderKnobIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            RenderKnobIndicator
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.RenderFocusRectangle(System.Windows.Forms.PaintEventArgs)">
            <summary>
            RenderFocusRectangle
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.RenderPart(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,DevComponents.Instrumentation.KnobControl.PreRenderEventHandler,DevComponents.Instrumentation.KnobControl.PostRenderEventHandler,DevComponents.Instrumentation.KnobControl.InternalRender)">
            <summary>
            Renders an individual 'part' of the control knob
            </summary>
            <param name="e"></param>
            <param name="bounds">Bounding rectangle</param>
            <param name="preRender">User PreRender callout</param>
            <param name="postRender">User PostRender callout</param>
            <param name="internalRender">Internal render callout</param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Routine to signify that the directional keys
            (up/down/left/right) are special input keys
            </summary>
            <param name="key"></param>
            <returns>true if the key is an input key</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles knob rotation via key input
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.AdjustValue(System.Decimal)">
            <summary>
            Adjusts the Value via the keyboard or mouse
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.GetDelta(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Calculates the delta adjustment for the
            pos or neg increment with respect to the
            supplied modifiers (Control/Shift)
            </summary>
            <param name="mods">Keys.Control and/or Keys.Shift</param>
            <param name="inc">Denotes whether to increment or decrement</param>
            <returns>Signed delta value</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown processing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp processing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove processing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles MouseWheel events
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.InvalidateKnob">
            <summary>
            Invalidates the knob
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.GetValueFromPoint(System.Drawing.Point)">
            <summary>
            Gets the Knob value from the given Point
            </summary>
            <param name="pt">Point</param>
            <returns>Value</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.System#IDisposable#Dispose">
            <summary>
            IDisposable.Dispose
            </summary>
        </member>
        <member name="F:DevComponents.Instrumentation.KnobControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevComponents.Instrumentation.KnobControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PreRenderZoneIndicator">
            <summary>
            Event raised just before the ZoneIndicator is rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PreRenderTickMinor">
            <summary>
            Event raised just before the Minor Tick Marks are rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PreRenderTickMajor">
            <summary>
            Event raised just before the Major Tick Marks are rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PreRenderTickLabel">
            <summary>
            Event raised just before the Tick Labels are rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PreRenderKnobFace">
            <summary>
            Event raised just before the KnobFace is rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PreRenderKnobIndicator">
            <summary>
            Event raised just before the KnobIndicator is rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PostRenderZoneIndicator">
            <summary>
            Event raised right after the ZoneIndicator is rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PostRenderTickMinor">
            <summary>
            Event raised right after the Minor Tick Marks are rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PostRenderTickMajor">
            <summary>
            Event raised right after the Major Tick Marks are rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PostRenderTickLabel">
            <summary>
            Event raised right after the Tick Labels are rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PostRenderKnobFace">
            <summary>
            Event raised right after the KnobFace is rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.PostRenderKnobIndicator">
            <summary>
            Event raised right after the KnobIndicator is rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.RenderFocusRect">
            <summary>
            Event raised when the Focus Rectangle needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.ValueChanged">
            <summary>
            Event raised when the Focus Rectangle needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.Instrumentation.KnobControl.ColorTableChanged">
            <summary>
            Event raised when the Knob ColorTable has changed
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.AllowDecimalValueSelection">
            <summary>
            Gets and sets whether Values with decimals can be used
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.FocusCuesEnabled">
            <summary>
            Gets or sets whether control displays focus cues when focused.
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.Font">
            <summary>
            Gets or sets the KnobControl Font
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.KnobColor">
            <summary>
            Gets and sets the display Colors of the KnobControl
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.KnobStyle">
            <summary>
            Gets and sets the display style of the knob
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.MinZonePercentage">
            <summary>
            Get and sets the numeric value that
            represents the MinZoneIndicator percentage
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.MajorTickAmount">
            <summary>
            Gets and sets the amount each
            major tick represents on the knob
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.MaxValue">
            <summary>
            Get and sets the upper limit of the knob range
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.MinorTickAmount">
            <summary>
            Gets and sets the amount each
            minor tick represents on the knob
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.MinValue">
            <summary>
            Gets and sets the lower limit of the knob range
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.MaxZonePercentage">
            <summary>
            Get and sets the numeric value that
            represents the MaxZoneIndicator percentage
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.ReadOnly">
            <summary>
            Get and sets the (user access) ReadOnly state of the control
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.SelectionDecimals">
            <summary>
            Gets and sets the number of selection decimals. This is used in conjunction with AllowDecimalValueSelection.
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.StartAngle">
            <summary>
            Gets and sets the angle measured
            from the x-axis to the starting point of the gauge zone
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.SweepAngle">
            <summary>
            Get and sets the angle measured from the StartAngle to the ending point of the gauge zone.
            Positive values signify clockwise rotation; negative values, counter-clockwise rotation.
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.KnobControl.Value">
            <summary>
            Gets and sets the numeric value that
            represents the current position of the knob selector
            </summary>
        </member>
        <member name="T:DevComponents.Instrumentation.eKnobStyle">
            <summary>
            Various Knob Control display styles
            </summary>
        </member>
        <member name="T:DevComponents.Instrumentation.PreRenderEventArgs">
            <summary>
            PreRenderEventArgs - user cancellable
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.PreRenderEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            PreRenderEventArgs
            </summary>
            <param name="graphics"></param>
            <param name="clipRectangle"></param>
            <param name="bounds"></param>
        </member>
        <member name="P:DevComponents.Instrumentation.PreRenderEventArgs.Graphics">
            <summary>
            Gets the event Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.PreRenderEventArgs.ClipRectangle">
            <summary>
            Gets the event ClipRectangle
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.PreRenderEventArgs.Bounds">
            <summary>
            Gets the event Bounds
            </summary>
        </member>
        <member name="T:DevComponents.Instrumentation.PostRenderEventArgs">
            <summary>
            PostRenderEventArgs
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.PostRenderEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            PostRenderEventArgs
            </summary>
            <param name="graphics"></param>
            <param name="clipRectangle"></param>
            <param name="bounds"></param>
        </member>
        <member name="P:DevComponents.Instrumentation.PostRenderEventArgs.Graphics">
            <summary>
            Gets the event Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.PostRenderEventArgs.ClipRectangle">
            <summary>
            Gets the event ClipRectangle
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.PostRenderEventArgs.Bounds">
            <summary>
            Gets the event Bounds
            </summary>
        </member>
        <member name="T:DevComponents.Instrumentation.RenderFocusRectEventArgs">
            <summary>
            RenderFocusRectEventArgs
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.RenderFocusRectEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            RenderFocusRectEventArgs
            </summary>
            <param name="graphics"></param>
            <param name="clipRectangle"></param>
            <param name="bounds"></param>
        </member>
        <member name="P:DevComponents.Instrumentation.RenderFocusRectEventArgs.Graphics">
            <summary>
            Gets the event Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.RenderFocusRectEventArgs.ClipRectangle">
            <summary>
            Gets the event ClipRectangle
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.RenderFocusRectEventArgs.Bounds">
            <summary>
            Gets the event Bounds
            </summary>
        </member>
        <member name="T:DevComponents.Instrumentation.ValueChangedEventArgs">
            <summary>
            ValueChangedEventArgs
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.ValueChangedEventArgs.#ctor(System.Decimal,System.Decimal)">
            <summary>
            ValueChangedEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.ValueChangedEventArgs.OldValue">
            <summary>
            Gets the old value
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.ValueChangedEventArgs.NewValue">
            <summary>
            Gets the new value
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle1.#ctor(DevComponents.Instrumentation.KnobControl)">
            <summary>
            Constructor
            </summary>
            <param name="knobControl">Associated knob control</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle1.ConfigureKnob(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Configures the given knob control
            by establishing various default object parameters
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle1.CalculateBoundingRects">
            <summary>
            Calculates several default control
            // bounding rectangles
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle1.RenderZoneIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the zone indicator
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle1.RenderKnobFace(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the knob face
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle1.RenderKnobIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the knob face
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle1.GetIndicatorRect">
            <summary>
            Returns the knob indicator rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.#ctor(DevComponents.Instrumentation.KnobControl)">
            <summary>
            Constructor
            </summary>
            <param name="knobControl">Associated knob control</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.ConfigureKnob(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Configures the given knob control
            by establishing various default object parameters
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.CalculateBoundingRects">
            <summary>
            Calculates several default control
            // bounding rectangles
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.RenderZoneIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the zone indicator
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.RenderTickMinor(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the minor tick marks
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.GetMinorTickPoints(System.Int32)">
            <summary>
            Calculates a series of points
            that defines the tick mark
            </summary>
            <param name="tick">Tick to calculate</param>
            <returns>An array of points that defines the tick</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.RenderKnobFace(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the knob face
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.RenderKnobIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the knob face
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle2.GetIndicatorPoints">
            <summary>
            Calculates a series of points that
            defines the indicator arrow
            </summary>
            <returns>An array of defining points</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.#ctor(DevComponents.Instrumentation.KnobControl)">
            <summary>
            Constructor
            </summary>
            <param name="knobControl">Associated knob control</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.ConfigureKnob(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Configures the given knob control
            by establishing various default object parameters
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.CalculateBoundingRects">
            <summary>
            Calculates several default control
            // bounding rectangles
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderZoneIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the zone indicator
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderArc(System.Drawing.Graphics,System.Single,System.Single,DevComponents.Instrumentation.Primitives.LinearGradientColorTable)">
            <summary>
            Renders a gradient indicator arc by dividing
            the arc into sub-arcs, enabling us to utilize normal
            rectangle gradient support
            </summary>
            <param name="g"></param>
            <param name="a1">Starting angle</param>
            <param name="s1">Sweep angle</param>
            <param name="ct"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.CalcCoord(System.Single)">
            <summary>
            Calculates the arc coordinates for 
            a given angle
            </summary>
            <param name="a2">Angle</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderTickMinor(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the minor tick marks
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.GetMinorTickPoints(System.Int32)">
            <summary>
            Calculates a series of points
            that defines the tick mark
            </summary>
            <param name="tick">Tick to calculate</param>
            <returns>An array of points that defines the tick</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderTickMajor(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the Major Tick marks
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.GetMajorTickPoints(System.Int32)">
            <summary>
            Calculates a series of points
            that defines the tick mark
            </summary>
            <param name="tick">Tick to calculate</param>
            <returns>An array of points that defines the tick</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderKnobFace(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the knob face
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderInset(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Pen,System.Int32)">
            <summary>
            Renders the face, including the arc insets
            as well as the connecting segments
            </summary>
            <param name="g"></param>
            <param name="path">Path to render to</param>
            <param name="pen">Outlining pen</param>
            <param name="offset">Delta offset - used for shadowing</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.GetArcPoint(System.Drawing.Rectangle,System.Single,System.Int32)">
            <summary>
            Calculates the arc point at the given
            degree and offset
            </summary>
            <param name="rInset">Inset bounding rectangle</param>
            <param name="degree">Degree to position arc inset</param>
            <param name="offset">Offset (used for shading)</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderKnobIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the knob face
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderIndCrescent(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle)">
            <summary>
            Renders the hilight crescent
            </summary>
            <param name="g"></param>
            <param name="path">Accumulating GraphicsPath</param>
            <param name="r">Bounding rectangle</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.RenderIndFace(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle)">
            <summary>
            Renders the face of the knob indicator
            </summary>
            <param name="g"></param>
            <param name="path">Accumulating GraphicsPath</param>
            <param name="r">Bounding rectangle</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle3.GetIndicatorPoints">
            <summary>
            Calculates a series of points that
            defines the indicator arrow
            </summary>
            <returns>An array of defining points</returns>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle4.#ctor(DevComponents.Instrumentation.KnobControl)">
            <summary>
            Constructor
            </summary>
            <param name="knobControl">Associated knob control</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle4.ConfigureKnob(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Configures the given knob control
            by establishing various default object parameters
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle4.CalculateBoundingRects">
            <summary>
            Calculates several default control
            // bounding rectangles
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle4.RenderZoneIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the zone indicator
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle4.RenderKnobFace(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the knob face
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle4.RenderKnobIndicator(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the knob indicator
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.KnobStyle4.GetIndicatorPoints">
            <summary>
            Calculates a series of points that
            defines the indicator arrow
            </summary>
            <returns>An array of defining points</returns>
        </member>
        <member name="T:DevComponents.Instrumentation.Primitives.LinearGradientColorTable">
            <summary>
            Represents the color table of linear gradient.
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.#ctor">
            <summary>
            Creates new instance of the object.
            </summary>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.#ctor(System.Drawing.Color)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="start">Start color.</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="start">Start color in hexadecimal representation like FFFFFF.</param>
            <param name="end">End color in hexadecimal representation like FFFFFF.</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="start">Start color in 32-bit RGB representation.</param>
            <param name="end">End color in 32-bit RGB representation.</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="start">Start color in 32-bit RGB representation.</param>
            <param name="end">End color in 32-bit RGB representation.</param>
            <param name="gradientAngle">Gradient angle.</param>
        </member>
        <member name="M:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="gradientAngle">Gradient angle.</param>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.Start">
            <summary>
            Gets or sets the start color.
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.End">
            <summary>
            Gets or sets the end color.
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.GradientAngle">
            <summary>
            Gets or sets the gradient angle. Default value is 90.
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Primitives.LinearGradientColorTable.IsEmpty">
            <summary>
            Gets whether both colors assigned are empty.
            </summary>
        </member>
        <member name="T:DevComponents.Instrumentation.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DevComponents.Instrumentation.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
